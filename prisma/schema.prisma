// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

// Define user roles for access control
enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime? // having 'emailVerified' a dateTime field rather than a boolean is that it not only indicates whether the email is verified but also records when the verification happened.
  image                 String?
  password              String? // optional, because we don't have pw in case of google or github login
  role                  UserRole               @default(USER)
  accounts              Account[]
  VerificationToken     VerificationToken[] // Defines a one-to-many relationship between User and VerificationToken models
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Defines a field named "user" of type "User" in the "Account" model. uses "userId" to make the connection for each Account to a User and ensures that if a user is deleted, their associated accounts are also removed

  // Ensure each account is unique per provider
  @@unique([provider, providerAccountId])
}

//? Model for storing verification tokens associated with user email verification
// This model is needed only for Credentials Provider accounts
model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([email, token]) // This means that no two records in the database can have the same combination of email and token.
}

//? Model for storing password reset tokens associated with user email
model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token]) // This means that no two records in the database can have the same combination of email and token.
}

//? Model for storing two-factor authentication tokens associated with user email
model TwoFactorToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token]) // This ensures that no two records in the database can have the same combination of email and token.
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String @unique()
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
